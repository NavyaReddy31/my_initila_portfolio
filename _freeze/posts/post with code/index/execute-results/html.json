{
  "hash": "7b0c5828b38792148379c0f68fd33968",
  "result": {
    "markdown": "---\ntitle: \"Data framing with R\"\nauthor: \"Navya reddy\"\ndate: \"2023-12-08\"\ncategories: [news, code, analysis,plotly,plot]\nimage: \"b.jpg\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary libraries\nlibrary(ggplot2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.3.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(caret)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'caret' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: lattice\n```\n:::\n\n```{.r .cell-code}\nlibrary(randomForest)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'randomForest' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nrandomForest 4.7-1.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nType rfNews() to see new features/changes/bug fixes.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'randomForest'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    combine\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:ggplot2':\n\n    margin\n```\n:::\n\n```{.r .cell-code}\nlibrary(rpart)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'rpart' was built under R version 4.3.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(e1071) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'e1071' was built under R version 4.3.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(kknn) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'kknn' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'kknn'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:caret':\n\n    contr.dummy\n```\n:::\n\n```{.r .cell-code}\n# Function to calculate RMSE\ncalculate_rmse <- function(predictions, actuals) {\n  sqrt(mean((predictions - actuals)^2))\n}\n\n# Generate random data\nset.seed(123)\nx <- rnorm(100)\ny <- 2 * x + rnorm(100)\n\n# Combine data into a data frame\ndata <- data.frame(x = x, y = y)\n\n# Support Vector Machine (SVM)\nsvm_model <- svm(y ~ x, data = data)\n\n# k-Nearest Neighbors (k-NN)\nknn_model <- kknn(y ~ x, train = data, test = data, k = 3)\n\n# Display the first few rows of the dataset\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            x          y\n1 -0.56047565 -1.8313579\n2 -0.23017749 -0.2034713\n3  1.55870831  2.8707247\n4  0.07050839 -0.2065258\n5  0.12928774 -0.6930431\n6  1.71506499  3.3851022\n```\n:::\n\n```{.r .cell-code}\n# Summary statistics\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       x                  y           \n Min.   :-2.30917   Min.   :-4.57394  \n 1st Qu.:-0.49385   1st Qu.:-1.24394  \n Median : 0.06176   Median : 0.20613  \n Mean   : 0.09041   Mean   : 0.07326  \n 3rd Qu.: 0.69182   3rd Qu.: 1.35295  \n Max.   : 2.18733   Max.   : 4.97537  \n```\n:::\n\n```{.r .cell-code}\n# Scatter plot of X and Y\nggplot(data, aes(x = x, y = y)) +\n  geom_point(color = \"blue\") +\n  labs(title = \"Scatter Plot of X vs Y\",\n       x = \"X\",\n       y = \"Y\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Linear Regression\nlm_model <- lm(y ~ x, data = data)\n\n# Decision Tree\ndt_model <- rpart(y ~ x, data = data)\n\n# Random Forest\nrf_model <- randomForest(y ~ x, data = data)\n\n# Model Evaluation\n# Make predictions\nlm_predictions <- predict(lm_model, newdata = data)\ndt_predictions <- predict(dt_model, newdata = data)\nrf_predictions <- predict(rf_model, newdata = data)\n\n# Evaluate models\nlm_rmse <- calculate_rmse(lm_predictions, data$y)\ndt_rmse <- calculate_rmse(dt_predictions, data$y)\nrf_rmse <- calculate_rmse(rf_predictions, data$y)\n\n# Print model evaluation results\ncat(\"Linear Regression Model:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear Regression Model:\n```\n:::\n\n```{.r .cell-code}\ncat(\"RMSE:\", lm_rmse, \"\\n\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRMSE: 0.9609585 \n```\n:::\n\n```{.r .cell-code}\ncat(\"Decision Tree Model:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDecision Tree Model:\n```\n:::\n\n```{.r .cell-code}\ncat(\"RMSE:\", dt_rmse, \"\\n\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRMSE: 0.9071943 \n```\n:::\n\n```{.r .cell-code}\ncat(\"Random Forest Model:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRandom Forest Model:\n```\n:::\n\n```{.r .cell-code}\ncat(\"RMSE:\", rf_rmse, \"\\n\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRMSE: 0.5559451 \n```\n:::\n\n```{.r .cell-code}\n# Plot the data and regression lines for all models\nggplot(data, aes(x = x, y = y)) +\n  geom_point(color = \"blue\") +\n  geom_abline(intercept = coef(lm_model)[1], slope = coef(lm_model)[2], color = \"red\", linetype = \"dashed\", size = 1) +\n  geom_line(data = data.frame(x = sort(data$x), y = predict(dt_model, newdata = data.frame(x = sort(data$x)))), color = \"green\", size = 1) +\n  geom_line(data = data.frame(x = sort(data$x), y = predict(rf_model, newdata = data.frame(x = sort(data$x)))), color = \"purple\", size = 1) +\n  labs(title = \"Linear Regression, Decision Tree, and Random Forest Models\",\n       x = \"X\",\n       y = \"Y\") +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nâ„¹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Support Vector Machine (SVM)\nsvm_model <- svm(y ~ x, data = data)\n\n# k-Nearest Neighbors (k-NN)\nknn_model <- kknn(y ~ x, train = data, test = data, k = 3)\n\n# Make predictions for SVM and k-NN\nsvm_predictions <- predict(svm_model, newdata = data)\n# k-Nearest Neighbors (k-NN)\nknn_model <- kknn(y ~ x, train = data, test = data, k = 3)\n\n# Extract predicted values from the k-NN model\nknn_predictions <- as.vector(knn_model$fitted.values)\n\n# Evaluate k-NN model\nknn_rmse <- calculate_rmse(knn_predictions, data$y)\n\n# Print k-NN model evaluation results\ncat(\"k-Nearest Neighbors (k-NN) Model:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nk-Nearest Neighbors (k-NN) Model:\n```\n:::\n\n```{.r .cell-code}\ncat(\"RMSE:\", knn_rmse, \"\\n\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRMSE: 0.6436795 \n```\n:::\n\n```{.r .cell-code}\n# Evaluate SVM and k-NN models\nsvm_rmse <- calculate_rmse(svm_predictions, data$y)\nknn_rmse <- calculate_rmse(knn_predictions, data$y)\n\n# Print additional model evaluation results\ncat(\"Support Vector Machine (SVM) Model:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSupport Vector Machine (SVM) Model:\n```\n:::\n\n```{.r .cell-code}\ncat(\"RMSE:\", svm_rmse, \"\\n\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRMSE: 0.9668863 \n```\n:::\n\n```{.r .cell-code}\ncat(\"k-Nearest Neighbors (k-NN) Model:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nk-Nearest Neighbors (k-NN) Model:\n```\n:::\n\n```{.r .cell-code}\ncat(\"RMSE:\", knn_rmse, \"\\n\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRMSE: 0.6436795 \n```\n:::\n\n```{.r .cell-code}\n# Plot the data and regression lines for all models\nggplot(data, aes(x = x, y = y)) +\n  geom_point(color = \"blue\") +\n  geom_abline(intercept = coef(lm_model)[1], slope = coef(lm_model)[2], color = \"red\", linetype = \"dashed\", size = 1) +\n  geom_line(data = data.frame(x = sort(data$x), y = predict(dt_model, newdata = data.frame(x = sort(data$x)))), color = \"green\", size = 1) +\n  geom_line(data = data.frame(x = sort(data$x), y = predict(rf_model, newdata = data.frame(x = sort(data$x)))), color = \"purple\", size = 1) +\n  geom_line(data = data.frame(x = sort(data$x), y = svm_predictions[order(data$x)]), color = \"orange\", size = 1) +\n  geom_line(data = data.frame(x = sort(data$x), y = knn_predictions[order(data$x)]), color = \"brown\", size = 1) +\n  labs(title = \"Multiple Regression Models Comparison\",\n       x = \"X\",\n       y = \"Y\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-3.png){width=672}\n:::\n:::\n\n\n***The R code generates a synthetic dataset with a linear relationship between variables 'X' and 'Y.' It implements and evaluates regression models, including Linear Regression, Decision Tree, Random Forest, Support Vector Machine (SVM), and k-Nearest Neighbors (k-NN), showcasing their predictive performance through Root Mean Squared Error (RMSE) metrics. The code concludes with a visualization comparing model predictions against the original data.***\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(caret)\nlibrary(randomForest)\nlibrary(rpart)\nlibrary(e1071) \nlibrary(kknn) \n\n# Generate random data\nset.seed(123)\nx <- rnorm(100)\ny <- 2 * x + rnorm(100)\n\n# Combine data into a data frame\ndata <- data.frame(x = x, y = y)\n\n# Exploratory Data Analysis (EDA)\n# (Remaining EDA code remains the same)\n\n# Support Vector Machine (SVM)\nsvm_model <- svm(y ~ x, data = data)\n\n# k-Nearest Neighbors (k-NN)\nknn_model <- kknn(y ~ x, train = data, test = data, k = 3)\n\n# Exploratory Data Analysis (EDA)\n\n# Display the first few rows of the dataset\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            x          y\n1 -0.56047565 -1.8313579\n2 -0.23017749 -0.2034713\n3  1.55870831  2.8707247\n4  0.07050839 -0.2065258\n5  0.12928774 -0.6930431\n6  1.71506499  3.3851022\n```\n:::\n\n```{.r .cell-code}\n# Summary statistics\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       x                  y           \n Min.   :-2.30917   Min.   :-4.57394  \n 1st Qu.:-0.49385   1st Qu.:-1.24394  \n Median : 0.06176   Median : 0.20613  \n Mean   : 0.09041   Mean   : 0.07326  \n 3rd Qu.: 0.69182   3rd Qu.: 1.35295  \n Max.   : 2.18733   Max.   : 4.97537  \n```\n:::\n\n```{.r .cell-code}\n# Scatter plot of X and Y\nggplot(data, aes(x = x, y = y)) +\n  geom_point(color = \"blue\") +\n  labs(title = \"Scatter Plot of X vs Y\",\n       x = \"X\",\n       y = \"Y\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Linear Regression\nlm_model <- lm(y ~ x, data = data)\n\n# Decision Tree\ndt_model <- rpart(y ~ x, data = data)\n\n# Random Forest\nrf_model <- randomForest(y ~ x, data = data)\n\n# Model Evaluation\n# Function to calculate RMSE\ncalculate_rmse <- function(predictions, actuals) {\n  sqrt(mean((predictions - actuals)^2))\n}\n\n# Make predictions\nlm_predictions <- predict(lm_model, newdata = data)\ndt_predictions <- predict(dt_model, newdata = data)\nrf_predictions <- predict(rf_model, newdata = data)\n\n# Evaluate models\nlm_rmse <- calculate_rmse(lm_predictions, data$y)\ndt_rmse <- calculate_rmse(dt_predictions, data$y)\nrf_rmse <- calculate_rmse(rf_predictions, data$y)\n\n# Print model evaluation results\ncat(\"Linear Regression Model:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear Regression Model:\n```\n:::\n\n```{.r .cell-code}\ncat(\"RMSE:\", lm_rmse, \"\\n\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRMSE: 0.9609585 \n```\n:::\n\n```{.r .cell-code}\ncat(\"Decision Tree Model:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDecision Tree Model:\n```\n:::\n\n```{.r .cell-code}\ncat(\"RMSE:\", dt_rmse, \"\\n\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRMSE: 0.9071943 \n```\n:::\n\n```{.r .cell-code}\ncat(\"Random Forest Model:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRandom Forest Model:\n```\n:::\n\n```{.r .cell-code}\ncat(\"RMSE:\", rf_rmse, \"\\n\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRMSE: 0.5559451 \n```\n:::\n\n```{.r .cell-code}\n# Plot the data and regression lines for all models\nggplot(data, aes(x = x, y = y)) +\n  geom_point(color = \"blue\") +\n  geom_abline(intercept = coef(lm_model)[1], slope = coef(lm_model)[2], color = \"red\", linetype = \"dashed\", size = 1) +\n  geom_line(data = data.frame(x = sort(data$x), y = predict(dt_model, newdata = data.frame(x = sort(data$x)))), color = \"green\", size = 1) +\n  geom_line(data = data.frame(x = sort(data$x), y = predict(rf_model, newdata = data.frame(x = sort(data$x)))), color = \"purple\", size = 1) +\n  labs(title = \"Linear Regression, Decision Tree, and Random Forest Models\",\n       x = \"X\",\n       y = \"Y\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Support Vector Machine (SVM)\nsvm_model <- svm(y ~ x, data = data)\n```\n:::\n\n\n***`The R code performs exploratory data analysis (EDA) on a synthetic dataset and evaluates multiple regression models, including Linear Regression, Decision Tree, and Random Forest. It generates a scatter plot, calculates summary statistics, and assesses model performance using Root Mean Squared Error (RMSE), presenting a visual comparison of model predictions against the original data.`***\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}